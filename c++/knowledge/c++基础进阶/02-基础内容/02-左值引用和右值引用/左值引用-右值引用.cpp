#include <iostream>

/**
 * 1.左值引用在汇编层面其实和普通的指针是一样的；定义引用变量必须初始化，因为引用其实就是一个别名，需要告诉编译器定义的是谁的引用。
 *  左值引用要求右边的值必须能够取地址，如果无法取地址，可以用常引用；
 *  但使用常引用后，我们只能通过引用来读取数据，无法去修改数据，因为其被const修饰成常量引用了。
 * 
 * 3.从本质上理解，创建和销毁由编译器幕后控制，程序员只能确保在本行代码有效的，就是右值(包括立即数)；而用户创建的，通过作用域规则可知其生存期的，就是左值(包括函数返回的局部变量的引用以及const对象)。
 *
 */

int main()
{
    int a = 10;
    int &b = a; // 定义一个左值引用变量
    b = 30;     // 通过左值引用来修改引用内存的值  // 左值，有内存，有名字，值可修改

    // int &c = 20; --错误写法 ，因为20无法进行取地址操作，无法对一个立即数取地址，因为立即数并没有在内存中存储，而是存储在寄存器中。可以通过下述方法解决：
    const int &d = 20; // 使用常引用来引用常量数字10，因为此刻内存上产生了临时变量保存了10，这个临时变量是可以进行取地址操作的，因此d引用的其实是这个临时变量，相当于下面的操作
    // const int temp = 10;
    // const int &d = temp;

    int &&c = 20; // 20是右值，没内存，没名字

    int &e = c; // 一个右值引用变量，本身是一个左值

    return 0;
}